#!/bin/bash -e
# vim: set tabstop=8 shiftwidth=4 softtabstop=4 expandtab smarttab colorcolumn=80:
#
# Copyright (c) 2017 Red Hat, Inc.
# Author: Javier Martinez Canillas <javierm@redhat.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# The owner hierarchy is the one that should be used by the Operating System.
auth="o"

function on_exit() {
    if [ ! -d "$TMP" ] || ! rm -rf "$TMP"; then
        echo "Delete temporary files failed!" >&2
        echo "You need to clean up: $TMP" >&2
        exit 1
    fi
}

[ $# -eq 1 ] && [ "$1" == "--summary" ] && exit 2

if [ -t 0 ]; then
    exec >&2
    echo
    echo "Usage: clevis decrypt tpm2counter < JWE > PLAINTEXT"
    echo
    exit 2
fi

TPM2TOOLS_INFO="$(tpm2_createprimary -v)"

match='version="(.)\.'
[[ $TPM2TOOLS_INFO =~ $match ]] && TPM2TOOLS_VERSION="${BASH_REMATCH[1]}"
if [[ $TPM2TOOLS_VERSION -lt 3 ]] || [[ $TPM2TOOLS_VERSION -gt 5 ]]; then
    echo "The tpm2 pin requires a tpm2-tools version between 3 and 5" >&2
    exit 1
fi

# Old environment variables for tpm2-tools 3.0
export TPM2TOOLS_TCTI_NAME=device
export TPM2TOOLS_DEVICE_FILE=
for dev in /dev/tpmrm?; do
    [ -e "$dev" ] || continue
    TPM2TOOLS_DEVICE_FILE="$dev"
    break
done

# New environment variable for tpm2-tools >= 3.1
export TPM2TOOLS_TCTI="$TPM2TOOLS_TCTI_NAME:$TPM2TOOLS_DEVICE_FILE"

if [ -z "$TPM2TOOLS_DEVICE_FILE" ]; then
    echo "A TPM2 device with the in-kernel resource manager is needed!" >&2
    exit 1
fi

if ! [[ -r "$TPM2TOOLS_DEVICE_FILE" && -w "$TPM2TOOLS_DEVICE_FILE" ]]; then
    echo "The $TPM2TOOLS_DEVICE_FILE device must be readable and writable!" >&2
    exit 1
fi

read -r -d . hdr

if ! jhd="$(jose b64 dec -i- <<< "$hdr")"; then
    echo "Error decoding JWE protected header!" >&2
    exit 1
fi

if [ "$(jose fmt -j- -Og clevis -g pin -u- <<< "$jhd")" != "tpm2counter" ]; then
    echo "JWE pin mismatch!" >&2
    exit 1
fi

time="$(   jose fmt -j- -Og clevis -g tpm2counter -g time    -Io- <<< "$jhd")" || true
clock="$(  jose fmt -j- -Og clevis -g tpm2counter -g clock   -Io- <<< "$jhd")" || true
reset="$(  jose fmt -j- -Og clevis -g tpm2counter -g reset   -Io- <<< "$jhd")" || true
restart="$(jose fmt -j- -Og clevis -g tpm2counter -g restart -Io- <<< "$jhd")" || true
safe="$(   jose fmt -j- -Og clevis -g tpm2counter -g safe    -Bo- <<< "$jhd")" || true
nvcounter_len="$(jose fmt -j- -Og clevis -g tpm2counter -g nvcounter -Alo- <<< "$jhd")" || true
nvindexlist=()
nvvaluelist=()
if [ -n "$nvcounter_len" -a "$nvcounter_len" != 0 ]; then
    nvcounter_json="$(jose fmt -j- -Og clevis -g tpm2counter -g nvcounter -Ao- <<< "$jhd")"
    for index in $(seq 0 $((nvcounter_len - 1))); do
        nvindexlist+=$(jose fmt -j- -g $index -g index -Su- <<< "$nvcounter_json")
        nvvaluelist+=$(jose fmt -j- -g $index -g value -Su- <<< "$nvcounter_json")
    done
fi


if ! jwk_pub="$(jose fmt -j- -Og clevis -g tpm2counter -g jwk_pub -Su- <<< "$jhd")"; then
    echo "JWE missing required 'key' header parameter!" >&2
    exit 1
fi

if ! jwk_priv="$(jose fmt -j- -Og clevis -g tpm2counter -g jwk_priv -Su- <<< "$jhd")"; then
    echo "JWE missing required 'key' header parameter!" >&2
    exit 1
fi

if ! TMP="$(mktemp -d)"; then
    echo "Creating a temporary dir for TPM files failed!" >&2
    exit 1
fi

trap 'on_exit' EXIT

if ! jose b64 dec -i- -O "$TMP"/jwk.pub <<< "$jwk_pub"; then
    echo "Decoding jwk.pub from Base64 failed!" >&2
    exit 1
fi

if ! jose b64 dec -i- -O "$TMP"/jwk.priv <<< "$jwk_priv"; then
    echo "Decoding jwk.priv from Base64 failed!" >&2
    exit 1
fi

tpm2_createprimary -Q -C o -g sha256 -G ecc -c "$TMP"/primary.context || fail=$?
if [ -n "$fail" ]; then
    echo "Creating TPM2 primary key failed!" >&2
    exit 1
fi

tpm2_load -Q -C "$TMP"/primary.context -u "$TMP"/jwk.pub -r "$TMP"/jwk.priv -c "$TMP"/load.context || fail=$?
if [ -n "$fail" ]; then
    echo "Loading jwk to TPM2 failed!" >&2
    exit 1
fi

tpm2_startauthsession -S "$TMP"/session.ctx --policy-session || fail=$?
if [ -n "$fail" ]; then
    echo "Creating TPM2 session failed!" >&2
    exit 1
fi

if [ -n "$time" ]; then
    tpm2_policycountertimer -Q -S "$TMP"/session.ctx -L "$TMP"/policy.countertimer --ule time=$time || fail=$?
    if [ -n "$fail" ]; then
        echo "Adding time policy failed!" >&2
        exit 1
    fi
fi
if [ -n "$clock" ]; then
    tpm2_policycountertimer -Q -S "$TMP"/session.ctx -L "$TMP"/policy.countertimer --ule clock=$clock || fail=$?
    if [ -n "$fail" ]; then
        echo "Adding clock policy failed!" >&2
        exit 1
    fi
fi
if [ -n "$reset" ]; then
    tpm2_policycountertimer -Q -S "$TMP"/session.ctx -L "$TMP"/policy.countertimer --ule resets=$reset || fail=$?
    if [ -n "$fail" ]; then
        echo "Adding resets policy failed!" >&2
        exit 1
    fi
fi
if [ -n "$restart" ]; then
    tpm2_policycountertimer -Q -S "$TMP"/session.ctx -L "$TMP"/policy.countertimer --ule restarts=$restart || fail=$?
    if [ -n "$fail" ]; then
        echo "Adding restarts policy failed!" >&2
        exit 1
    fi
fi

if [ -n "$safe" ] && [ "$safe" == "true" ]; then
    tpm2_policycountertimer -Q -S "$TMP"/session.ctx -L "$TMP"/policy.countertimer safe || fail=$?
    if [ -n "$fail" ]; then
        echo "Adding safe policy failed!" >&2
        exit 1
    fi
fi

for i in ${!nvindexlist[@]}; do
    echo ${nvvaluelist[$i]} | xxd -r -p | tpm2_policynv -Q -S "$TMP"/session.ctx -L "$TMP"/policy.countertimer -i- ${nvindexlist[$i]} ule || fail=$?
    if [ -n "$fail" ]; then
        echo "Adding nv index policy failed!" >&2
        exit 1
    fi
done

jwk="$(tpm2_unseal -c "$TMP"/load.context -p session:"$TMP"/session.ctx)" || fail=$?
if [ -n "$fail" ]; then
    echo "Unsealing jwk from TPM failed!" >&2
    exit 1
fi

tpm2_flushcontext "$TMP"/session.ctx || fail=$?
if [ -n "$fail" ]; then
    echo "Flushing TPM2 session failed!" >&2
    exit 1
fi

(echo -n "$jwk$hdr."; /bin/cat) | jose jwe dec -k- -i-
exit $?
